# ==========================
# Namespace
# ==========================
apiVersion: v1
kind: Namespace
metadata:
  name: cloudnet
---
# ==========================
# Secrets (to be created from .env)
# ==========================

apiVersion: v1
kind: Secret
metadata:
  name: db-secret
  namespace: cloudnet
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  name: api-secrets
  namespace: cloudnet
type: Opaque
---
# ==========================
# MySQL PVC, Deployment, Service
# ==========================
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: cloudnet
spec:
  accessModes: [ "ReadWriteOnce" ]
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: cloudnet
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:8.0
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: MYSQL_ROOT_PASSWORD
            - name: MYSQL_DATABASE
              value: reqnestdb
          volumeMounts:
            - name: mysql-storage
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-storage
          persistentVolumeClaim:
            claimName: mysql-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: cloudnet
spec:
  type: ClusterIP
  ports:
    - port: 3306
      targetPort: 3306
  selector:
    app: mysql
---
# ==========================
# MongoDB PVC, Deployment, Service
# ==========================
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc
  namespace: cloudnet
spec:
  accessModes: [ "ReadWriteOnce" ]
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo
  namespace: cloudnet
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
        - name: mongo
          image: mongo:6
          ports:
            - containerPort: 27017
          volumeMounts:
            - name: mongo-storage
              mountPath: /data/db
      volumes:
        - name: mongo-storage
          persistentVolumeClaim:
            claimName: mongo-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mongo
  namespace: cloudnet
spec:
  type: ClusterIP
  ports:
    - port: 27017
      targetPort: 27017
  selector:
    app: mongo
---
# ==========================
# Redis PVC, Deployment, Service
# ==========================
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: cloudnet
spec:
  accessModes: [ "ReadWriteOnce" ]
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: cloudnet
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:7
          command: ["redis-server"]
          args: ["--requirepass", "$(REDIS_PASSWORD)"]
          ports:
            - containerPort: 6379
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: REDIS_PASSWORD
          volumeMounts:
            - name: redis-storage
              mountPath: /data
          readinessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 15
            periodSeconds: 10
      volumes:
        - name: redis-storage
          persistentVolumeClaim:
            claimName: redis-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: cloudnet
spec:
  type: ClusterIP
  ports:
    - port: 6379
      targetPort: 6379
  selector:
    app: redis
---
# ==========================
# Backend ConfigMap
# ==========================
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
  namespace: cloudnet
data:
  DB_HOST: mysql
  DB_NAME: reqnestdb
  DB_USER: root
  DB_PORT: "3306"
  SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/reqnestdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
  MONGO_URI: mongodb://mongo:27017/reqnest
  REDIS_HOST: redis
  REDIS_PORT: "6379"
  FRONTEND_URL: http://frontend.cloudnet.svc.cluster.local
---
# ==========================
# Backend Deployment & Service
# ==========================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: cloudnet
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      initContainers:
        - name: wait-for-dependencies
          image: busybox:1.36
          command:
            - sh
            - -c
            - |
              echo "Waiting for MySQL..."
              until nc -z mysql 3306; do sleep 2; done
              echo "Waiting for Mongo..."
              until nc -z mongo 27017; do sleep 2; done
              echo "Waiting for Redis..."
              until nc -z redis 6379; do sleep 2; done
      containers:
        - name: backend
          image: akta2910/reqnest-backend:04
          ports:
            - containerPort: 8080
          envFrom:
            - configMapRef:
                name: backend-config
            - secretRef:
                name: db-secret
            - secretRef:
                name: api-secrets
---
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: cloudnet
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
  selector:
    app: backend
---
# ==========================
# Frontend Deployment & Service
# ==========================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: cloudnet
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: akta2910/reqnest-frontend:03
          ports:
            - containerPort: 80
          env:
            - name: VITE_API_URL
              value: "https://reqnest.com"
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: cloudnet
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
  selector:
    app: frontend
---
# ==========================
# Ingress (external access)
# ==========================
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: reqnest-ingress
  namespace: cloudnet
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - reqnest.com
      secretName: reqnest-tls
  rules:
    - host: reqnest.com
      http:
        paths:
          - path: /login/oauth2
            pathType: Prefix
            backend:
              service:
                name: backend
                port:
                  number: 8080
          - path: /oauth2
            pathType: Prefix
            backend:
              service:
                name: backend
                port:
                  number: 8080
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: backend
                port:
                  number: 8080
          - path: /
            pathType: Prefix
            backend:
              service:
                name: frontend
                port:
                  number: 80
